{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 // Online C compiler to run C program online\
#include <stdio.h>\
#include<stdlib.h>\
// Keep pointer at the last node on circular singly linked list becasuse traversing isnot required\
struct node \{\
    int data;\
    struct node * next;\
\};\
\
struct node* addToEmpty(int data)\{\
    struct node* temp = malloc(sizeof(struct node));\
    temp->data = data;\
    temp->next= temp;\
    return temp;\
\}\
\
struct node* addToBeg(struct node* tail,int data)\{\
    struct node* newP = malloc(sizeof(struct node));\
    newP->data = data;\
    newP->next= tail->next;\
    tail->next = newP;\
    return tail;\
    \
\}\
\
struct node* addAtEnd(struct node* tail, int data)\{\
    struct node* newP = malloc(sizeof(struct node));\
    newP->data = data;\
    newP->next = NULL;\
    \
    newP-> next = tail->next;\
    tail->next = newP;\
    tail = tail->next;\
    return tail;\
\}\
\
struct node* addAfterPos(struct node* tail,int data,int pos)\{\
    struct node* p = tail->next;\
    struct node* newP = malloc(sizeof(struct node));\
    newP -> data = data;\
    newP-> next = NULL;\
    while(pos > 1)\{\
        p = p->next;\
        pos--;\
    \}\
    newP->next = p->next;\
    p->next = newP;\
    \
    if(p == tail)\{\
        tail = tail->next;\
    \}\
    return tail;\
\}\
\
struct node* delFirst(struct node* tail)\{\
    if(tail == NULL)\{ //check if linkedlist is empty\
        return tail;\
    \}\
    if(tail->next == tail)\{ // check if there is only one node\
        free(tail);\
        tail=NULL;\
        return tail;\
    \}\
    struct node* temp = tail->next;\
    tail->next = temp->next;\
    free(temp);\
    temp = NULL;\
    return tail;\
\}\
struct node* delLast(struct node* tail,int data)\{\
    if ( tail ==NULL)\{\
        return tail;\
    \}\
    struct node* temp = tail->next;\
    while(temp->next != tail)\{\
        temp = temp->next;\
    \}\
    \
    temp->next = tail->next;\
    free(tail);\
    tail = NULL;\
    return tail;\
    \
\}\
\
struct node* delInter(struct node* tail,int pos)\{\
    struct node* temp = tail->next;\
    \
    while (pos > 2)\{\
        temp = temp-> next;\
        pos--;\
    \}\
    struct node* temp2 = temp->next;\
    temp->next=temp2->next;\
    free(temp2);\
    temp2 = NULL;\
    return tail;\
\}\
\
void print(struct node* tail)\{\
    struct node* p = tail->next;\
    do\{\
        printf("%d ",p->data);\
        p= p->next;\
    \}while(p != tail->next);\
    \}\
\
\
int main() \{\
    // Write C code here\
    struct node* tail;\
    tail = addToEmpty(45);\
    tail = addToBeg(tail,34);\
    tail= addAtEnd(tail,6);\
    \
    printf("\\n");\
    tail = addAfterPos(tail,66,3);\
    tail = delInter(tail,3);\
    \
    print(tail);\
    \
    return 0;\
\}}