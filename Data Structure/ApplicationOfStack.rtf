{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #include<stdio.h>\
#include<stdlib.h>\
#include<string.h>\
#define MAX 100\
\
char stack[MAX];\
char infix[MAX],postfix[MAX];\
int top = -1;\
\
void push(char);\
char pop();\
int isEmpty();\
void inToPost();\
int space(char);\
void print();\
int precedence(char);\
\
int precedence(char symbol)\{\
    switch(symbol)\{\
        case '^':\
            return 3;\
        case '*':\
        case '/':\
            return 2;\
        case '+':\
        case '-':\
            return 1;\
        default:\
            return 0;\
    \}\
\}\
\
void push(char c)\{\
    if (top == MAX - 1)\{\
        printf("Stack OverFlow");\
        return; //indicates the end of the fucntion\
    \}\
    top++;\
    stack[top] = c;\
\}\
\
char pop()\{\
    char c;\
    if(top == -1)\{\
        printf("Stack Underflow ok");\
        exit(1);\
    \}\
    c = stack[top];\
    top = top -1 ;\
    return c;\
\}\
\
int isEmpty()\{\
    if(top == -1)\
        return 1;\
    else\
        return 0;\
\}\
void print()\{\
    int i=0;\
    printf("the equivalent postfix expression is :");\
    while (postfix[i])\{\
        printf("%c",postfix[i++]);\
    \}\
    printf("\\n");\
\}\
\
int space(char c)\{\
    if ( c == ' ' || c == '\\t' )\
        return 1;\
    else\
        return 0;\
\}\
\
void inToPost()\{\
    int i , j=0;\
    char symbol,next;\
    for(i=0;i < strlen(infix); i++ )\{\
        symbol = infix[i];\
        if(!space(symbol))\{\
        switch(symbol)\{\
            case '('  :\
                push(symbol);\
                break;\
            case ')' :\
                while((next = pop()) != '(' )\
                    postfix[j++] = next ;\
                break;\
            case '+':\
            case '-':\
            case '*' :\
            case '/':\
            case '^' :\
                while (!isEmpty() && precedence(stack[top]) >= precedence(symbol)) \{\
                    postfix[j++] = pop();\
                \}\
                push(symbol);\
                break;\
            default:\
                postfix[j++] = symbol;\
        \}\
    \}\
    \} \
    while(!isEmpty())\{\
        postfix[j++] = pop();\
    \}\
    postfix[j] = '\\0';\
\}\
\
int main()\{\
    printf("Enter infix expression:");\
    gets(infix);\
    inToPost();\
    print();\
    return 0;\
\}}