{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #include<stdio.h>\
#include<stdlib.h>\
#define MAX 100\
\
char stack[MAX];\
int top = -1;\
void push(char);\
char pop();\
int isEmpty();\
int isFull();\
int checked_balanced(char*);\
int match_char(char,char);\
\
int check_balanced(char* s)\{\
    int i; \
    char temp;\
    for(i=0; i<strlen(s) ; i++)\{\
        // If the ssymbol is left bracket then push that symbol onto the stack\
        if( s[i] == "[" || s[i] == "\{" || s[i] == "("  )\{\
            push(s[i]);\
        \}\
        //if the symnol is right barcket\
        if (s[i] == "]" || s[i] == "\}" || s[i] == ")" )\{\
            if(isEmpty())\{\
                printf("Right brackets are more than the left \\n");\
                return 0;\
            \}\
            else\{\
                temp = pop();\
                if(!match_char(temp,s[i])) \{\
                    printf("Mismatched brackets \\n");\
                    return 0;\
                \}\
            \}\
        \}\
    \}\
    if(isEmpty())\{\
        printf("Brackts are well balanced. \\n");\
        return 1;\
    \}\
    else\{\
        printf("Left brackets are more than the right \\n");\
        return 0;\
        \
    \}\
\}\
\
void push(char c)\{\
    if(isFull())\{\
        printf("Stack overflow");\
        exit(1);\
    \}\
    top++;\
    stack[top] = c;\
\}\
\
char pop()\{\
    char c;\
    if(isEmpty())\{\
        printf("Stack Uderflow");\
        exit(1);\
    \}\
    c = stack[top];\
    top--;\
    return c;\
\}\
\
int isEmpty()\{\
    if (top == -1)\{\
        return 1;\
    \}\
    else\{\
        return 0;\
    \}\
\}\
\
int isFull()\{\
    if(top == MAX - 1)\{\
        return 1;\
    \}\
    else \{\
        return 0;\
    \}\
\}\
\
int match_char(char a,char b)\{\
    if(a == "[" && b == "]")\
        return 1;\
    if (a == "\{" && b == "\}" )\
        return 1;\
    if ( a == "[" && b == "]" )\
        return 1;\
    return 0;\
\}\
\
int main()\{\
    char expr[MAX];\
    int balanced;\
    printf("Enter the algebric expression:");\
    gets(expr);\
    \
    balanced = check_balanced(expr);\
    if (balanced == 1)\{\
        printf("The expression is valid");\
    \}\
    else\{\
        printf("the expression is not valid");\
    \}\
    return 0;\
\}}